{
    "reason": "",
    "state": "MERGED",
    "updated_on": "2012-03-26T17:38:59.553138+00:00",
    "comment_count": 2,
    "description": "Modifying the merger tree to save the halo relationships at every\r\ncycle of pairs, rather than just at the end. It also now has a check\r\nto see just how far along its gone so work is not repeated.\r\n\r\nThis is following up on this thread: http://lists.spacepope.org/pipermail/yt-dev-spacepope.org/2012-March/001921.html\r\n\r\nUpdate: I merged in the recent changes since I made this PR.\r\n\r\nUpdate 2: I've put the table creation SQL line at the top with a big comment explaining what's going on. I've also decided to not try to use numpy.intersect1d right now. I don't think it would be much faster, and could even be slower with all the array manipulation that it would require.",
    "created_on": "2012-03-23T23:18:28.848729+00:00",
    "task_count": 0,
    "merge_commit": null,
    "title": "More Merger Tree Improvements",
    "links": {
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/diff"
        },
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/decline"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/activity"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/merge"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/commits"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/statuses"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/comments"
        }
    },
    "closed_by": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
            },
            "html": {
                "href": "https://bitbucket.org/MatthewTurk/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Matt Turk",
        "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
        "username": "MatthewTurk"
    },
    "id": 130,
    "type": "pullrequest",
    "author": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/sskory"
            },
            "html": {
                "href": "https://bitbucket.org/sskory/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/sskory/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Stephen Skory",
        "uuid": "{11787434-dea2-42d8-b94d-88d347eb151a}",
        "username": "sskory"
    },
    "source": {
        "branch": {
            "name": "yt"
        },
        "commit": null,
        "repository": null
    },
    "close_source_branch": false,
    "destination": {
        "branch": {
            "name": "yt"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/9df7dbbc3c47"
                }
            },
            "hash": "9df7dbbc3c47"
        },
        "repository": {
            "full_name": "yt_analysis/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}"
        }
    },
    "comments": [
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/comments/4388"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130/_/diff#comment-4388"
                }
            },
            "pullrequest": {
                "title": "More Merger Tree Improvements",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130"
                    }
                },
                "id": 130
            },
            "content": {
                "raw": "Hi Stephen, thanks!\n\nJust a few comments:\n\n# For the table creation, since it's static and possibly useful to readers of the code, could you put the string initialization at the top of the module in a string constant?  (In fact, I think that raw strings, pre-templated, would be really useful to have at the top of the module, with names saying how they are used.)\n# In reading over the code, it looks like you wrote your own version of numpy's intersect function.  Is it possible to swap it out and use NumPy's, with the assume_unique flag set to True?",
                "html": "<p>Hi Stephen, thanks!</p>\n<p>Just a few comments:</p>\n<ol><li>For the table creation, since it's static and possibly useful to readers of the code, could you put the string initialization at the top of the module in a string constant?  (In fact, I think that raw strings, pre-templated, would be really useful to have at the top of the module, with names saying how they are used.)\n</li><li>In reading over the code, it looks like you wrote your own version of numpy's intersect function.  Is it possible to swap it out and use NumPy's, with the assume_unique flag set to True?</li></ol>\n",
                "markup": "creole"
            },
            "created_on": "2012-03-26T15:41:41.423898+00:00",
            "updated_on": "2012-03-26T15:41:41.432127+00:00",
            "id": 4388
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/sskory"
                    },
                    "html": {
                        "href": "https://bitbucket.org/sskory/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/sskory/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Stephen Skory",
                "uuid": "{11787434-dea2-42d8-b94d-88d347eb151a}",
                "username": "sskory"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/comments/4390"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130/_/diff#comment-4390"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130/comments/4388"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130/_/diff#comment-4388"
                    }
                },
                "id": 4388
            },
            "pullrequest": {
                "title": "More Merger Tree Improvements",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/130"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/130"
                    }
                },
                "id": 130
            },
            "content": {
                "raw": "Matt,\n\nFor 1., are you thinking about the \"CREATE TABLE...\" line? In that case, if I'm going to make a change there, I think I should do what I've intended to do all along (but never got around to doing) and replace the static string with a for loop on the list ''columns'' that uses the dict ''column_types'' to build the string automatically. I could put in a comment about what I'm doing there.\n\nFor 2., I think it might be possible, but I'm not sure it would be any faster. In particular, the loop you're referring to measures and records the relationships between all the halos in one go. If I used numpy.intersect1d, I think I'd have to do a double for loop over every set of identified possible parings. This isn't N^2 bad, but it's still a double loop. I'll give it some thought before either trying it out, or not.",
                "html": "<p>Matt,</p>\n<p>For 1., are you thinking about the \"CREATE TABLE...\" line? In that case, if I'm going to make a change there, I think I should do what I've intended to do all along (but never got around to doing) and replace the static string with a for loop on the list ''columns'' that uses the dict ''column_types'' to build the string automatically. I could put in a comment about what I'm doing there.</p>\n<p>For 2., I think it might be possible, but I'm not sure it would be any faster. In particular, the loop you're referring to measures and records the relationships between all the halos in one go. If I used numpy.intersect1d, I think I'd have to do a double for loop over every set of identified possible parings. This isn't N^2 bad, but it's still a double loop. I'll give it some thought before either trying it out, or not.</p>\n",
                "markup": "creole"
            },
            "created_on": "2012-03-26T16:00:16.877789+00:00",
            "updated_on": "2012-03-26T16:00:16.889162+00:00",
            "id": 4390
        }
    ]
}