{
    "reason": "",
    "state": "MERGED",
    "updated_on": "2015-08-20T16:26:11.926135+00:00",
    "comment_count": 8,
    "description": "This PR fixes a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), get_sph_theta(), and get_cyl_theta() in fields/particle_fields.py.  \r\n\r\nThe proposed changes repair a few misbehaving particle quantities such as:  particle_velocity_spherical_radius, particle_spherical_velocity_theta, particle_velocity_spherical_phi, particle_velocity_cylindrical_radius, particle_velocity_cylindrical_theta.  It would be great if @cosmosquark could take a look at the changes.   Thank you!\r\n\r\n",
    "created_on": "2015-08-08T08:47:05.540255+00:00",
    "task_count": 0,
    "merge_commit": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/d7969f97265f"
            }
        },
        "hash": "d7969f97265f"
    },
    "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
    "links": {
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/diff"
        },
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/decline"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/activity"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/merge"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/commits"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/statuses"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments"
        }
    },
    "closed_by": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/xarthisius"
            },
            "html": {
                "href": "https://bitbucket.org/xarthisius/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/xarthisius/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Kacper Kowalik",
        "uuid": "{26af8f1d-35b3-46ce-9939-09915b06e31f}",
        "username": "xarthisius"
    },
    "id": 1684,
    "type": "pullrequest",
    "author": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/mornkr"
            },
            "html": {
                "href": "https://bitbucket.org/mornkr/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/mornkr/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Ji-hoon Kim",
        "uuid": "{1c3473e1-38f3-4fe1-b4de-cb5c38d1d08a}",
        "username": "mornkr"
    },
    "source": {
        "branch": {
            "name": "yt"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/mornkr/yt/commit/e3431f1b2c0e"
                }
            },
            "hash": "e3431f1b2c0e"
        },
        "repository": {
            "full_name": "mornkr/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/mornkr/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/mornkr/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/mornkr/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{35cc4cb8-eaf2-4624-8a3d-5ad736d5ad3c}"
        }
    },
    "close_source_branch": false,
    "destination": {
        "branch": {
            "name": "yt"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/cc82a477e7c8"
                }
            },
            "hash": "cc82a477e7c8"
        },
        "repository": {
            "full_name": "yt_analysis/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}"
        }
    },
    "comments": [
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/cosmosquark"
                    },
                    "html": {
                        "href": "https://bitbucket.org/cosmosquark/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/cosmosquark/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ben Thompson",
                "uuid": "{9e042959-0198-4a41-9f94-522b998130ed}",
                "username": "cosmosquark"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8913648"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8913648"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "This may explain the mismatch that I have been getting between computing the cylindrical velocities of star particles manually compared to the results given by YT.\n\nWhen I get a moment this weekend, I will quickly check this. Good find.\n\nBen.",
                "html": "<p>This may explain the mismatch that I have been getting between computing the cylindrical velocities of star particles manually compared to the results given by YT.</p>\n<p>When I get a moment this weekend, I will quickly check this. Good find.</p>\n<p>Ben.</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-08T08:55:10.275505+00:00",
            "updated_on": "2015-08-08T08:55:10.329087+00:00",
            "id": 8913648
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/cosmosquark"
                    },
                    "html": {
                        "href": "https://bitbucket.org/cosmosquark/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/cosmosquark/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ben Thompson",
                "uuid": "{9e042959-0198-4a41-9f94-522b998130ed}",
                "username": "cosmosquark"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8913668"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8913668"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "Also. Would it make sense to do the co-ordinate shift with respect to the center first before getting the angular component?",
                "html": "<p>Also. Would it make sense to do the co-ordinate shift with respect to the center first before getting the angular component?</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-08T08:58:09.489415+00:00",
            "updated_on": "2015-08-08T08:58:09.533669+00:00",
            "id": 8913668
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/yt-fido"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt-fido/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/yt-fido/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "yt-fido",
                "uuid": "{da2aa332-3f05-45c9-ae53-ff5ba34b35ce}",
                "username": "yt-fido"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8913843"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8913843"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "All tests pass. Good job!",
                "html": "<p>All tests pass. Good job!</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-08T09:33:24.892589+00:00",
            "updated_on": "2015-08-08T09:33:24.942764+00:00",
            "id": 8913843
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/cosmosquark"
                    },
                    "html": {
                        "href": "https://bitbucket.org/cosmosquark/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/cosmosquark/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ben Thompson",
                "uuid": "{9e042959-0198-4a41-9f94-522b998130ed}",
                "username": "cosmosquark"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8914080"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8914080"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "Ok so with this, I think this bug existed in the spherical velocity fields when I was constructing the cylindrical velocity fields ((and thus copied the bug over to the cylindrical velocity fields).\n\nConveniently, I have been looking at this issue within YT in detail more recently. as such that I have been comparing the computation of Vr and Vtheta within YT to the computation manually... as such\n\n\n```\n#!python\n\ndef _v_r_all(field,data):\n\tnormal = data.get_field_parameter('normal')\n\tcenter = data.get_field_parameter('center')\n\tbv = data.get_field_parameter(\"bulk_velocity\")\n\tpos = data.ds.arr([data[\"all\", \"particle_position_%s\" % ax] for ax in \"xyz\"])\n\tvel = data.ds.arr([data[\"all\", \"particle_velocity_%s\" % ax] for ax in \"xyz\"])\n\tpos = pos.in_units(\"km\").value - np.reshape(center.in_units(\"km\").value, (3, 1))\n\tvel = vel.in_units(\"km/s\").value - np.reshape(bv.in_units(\"km/s\").value, (3, 1))\n\tr = (pos[0] * vel[0]) + (pos[1] * vel[1])\n\tr = r / np.sqrt(np.power(pos[0],2) + np.power(pos[1],2))\n\tr = data.ds.arr(r,\"km/s\")\n\treturn r\n\ndef _v_theta_all(field,data):\n\tnormal = data.get_field_parameter('normal')\n\tcenter = data.get_field_parameter('center')\n\tbv = data.get_field_parameter(\"bulk_velocity\")\n\tpos = data.ds.arr([data[\"all\", \"particle_position_%s\" % ax] for ax in \"xyz\"])\n\tvel = data.ds.arr([data[\"all\", \"particle_velocity_%s\" % ax] for ax in \"xyz\"])\n\tpos = pos.in_units(\"km\").value - np.reshape(center.in_units(\"km\").value, (3, 1))\n\tvel = vel.in_units(\"km/s\").value - np.reshape(bv.in_units(\"km/s\").value, (3, 1))\n\tt = (pos[0] * vel[1]) - (pos[1] * vel[0])\n\tt = t / np.sqrt(np.power(pos[0],2) + np.power(pos[1],2))\n\tt = data.ds.arr(t,\"km/s\")\n\treturn t\n```\nSo for example. I have been testing this with a galaxy with star particles which have been aligned to the angular momentum of the cold gas, and centered on the center of mass of the galaxy. And then filtered out for stars in a \"disk-like\" orbit from computing Jz/Jcirc in which disk stars will have values between 0.8 and 1.1\n\nI then plot a histogram for the velocity values of each star particle with 100 bins. I get these results before this change ... where vr and vtheta are the values computed above and vr-old and vtheta-old is the values computed within YT \n\n![v_hist_test_before.png](https://bitbucket.org/repo/BXbAb/images/3308045278-v_hist_test_before.png)\n\nand then afterwards\n\n![v_hist_test.png](https://bitbucket.org/repo/BXbAb/images/1867820243-v_hist_test.png)\n\nNote: I have also included the centering and applied the bulk velocity before getting the components... which might not be needed with e.g get_sph_r_component(vel, theta, phi, normal).. but that change should be made to avoid confusion.\n\nEither way, the change is definatly a big improvement :). I will look into more detail at this soon, but this is looking good.\n\nNote: it might also be worth to check whether the normal vectors being used are normalised... and whether that has an impact on these results ( see this PR https://bitbucket.org/yt_analysis/yt/pull-requests/1684/fixing-a-bug-where-center-vectors-are-used/diff#comment-8913843 where for example setting your code_length to be in cm or having a non normalised normal vector can produce incorrect results.\n\nNote: In the plots above, I have changed the polarity of the co-ordinate systems as such to immitate the normal vector to be in the opposite direction of the angular momentum vector computed within the gas... which really means that vtheta is positive rather than negative\n\nBen.",
                "html": "<p>Ok so with this, I think this bug existed in the spherical velocity fields when I was constructing the cylindrical velocity fields ((and thus copied the bug over to the cylindrical velocity fields).</p>\n<p>Conveniently, I have been looking at this issue within YT in detail more recently. as such that I have been comparing the computation of Vr and Vtheta within YT to the computation manually... as such</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">_v_r_all</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">normal</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s1\">&#39;normal&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">bv</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s2\">&quot;bulk_velocity&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;particle_position_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;xyz&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">vel</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;particle_velocity_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;xyz&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">vel</span> <span class=\"o\">=</span> <span class=\"n\">vel</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vel</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vel</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">r</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_v_theta_all</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">normal</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s1\">&#39;normal&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s1\">&#39;center&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">bv</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get_field_parameter</span><span class=\"p\">(</span><span class=\"s2\">&quot;bulk_velocity&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;particle_position_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;xyz&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">vel</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;particle_velocity_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">ax</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;xyz&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">vel</span> <span class=\"o\">=</span> <span class=\"n\">vel</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">bv</span><span class=\"o\">.</span><span class=\"n\">in_units</span><span class=\"p\">(</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vel</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vel</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">arr</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"s2\">&quot;km/s&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>So for example. I have been testing this with a galaxy with star particles which have been aligned to the angular momentum of the cold gas, and centered on the center of mass of the galaxy. And then filtered out for stars in a \"disk-like\" orbit from computing Jz/Jcirc in which disk stars will have values between 0.8 and 1.1</p>\n<p>I then plot a histogram for the velocity values of each star particle with 100 bins. I get these results before this change ... where vr and vtheta are the values computed above and vr-old and vtheta-old is the values computed within YT </p>\n<p><img alt=\"v_hist_test_before.png\" src=\"https://bitbucket.org/repo/BXbAb/images/3308045278-v_hist_test_before.png\" /></p>\n<p>and then afterwards</p>\n<p><img alt=\"v_hist_test.png\" src=\"https://bitbucket.org/repo/BXbAb/images/1867820243-v_hist_test.png\" /></p>\n<p>Note: I have also included the centering and applied the bulk velocity before getting the components... which might not be needed with e.g get_sph_r_component(vel, theta, phi, normal).. but that change should be made to avoid confusion.</p>\n<p>Either way, the change is definatly a big improvement :). I will look into more detail at this soon, but this is looking good.</p>\n<p>Note: it might also be worth to check whether the normal vectors being used are normalised... and whether that has an impact on these results ( see this PR <a href=\"https://bitbucket.org/yt_analysis/yt/pull-requests/1684/fixing-a-bug-where-center-vectors-are-used/diff#comment-8913843\" rel=\"nofollow\">https://bitbucket.org/yt_analysis/yt/pull-requests/1684/fixing-a-bug-where-center-vectors-are-used/diff#comment-8913843</a> where for example setting your code_length to be in cm or having a non normalised normal vector can produce incorrect results.</p>\n<p>Note: In the plots above, I have changed the polarity of the co-ordinate systems as such to immitate the normal vector to be in the opposite direction of the angular momentum vector computed within the gas... which really means that vtheta is positive rather than negative</p>\n<p>Ben.</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-08T10:23:50.759276+00:00",
            "updated_on": "2015-08-08T10:26:03.229717+00:00",
            "id": 8914080
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/mornkr"
                    },
                    "html": {
                        "href": "https://bitbucket.org/mornkr/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/mornkr/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ji-hoon Kim",
                "uuid": "{1c3473e1-38f3-4fe1-b4de-cb5c38d1d08a}",
                "username": "mornkr"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8917365"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8917365"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "Thank you Ben for quickly checking and verifying this PR.  \n\nIt is great to hear that the PR helps you solve the riddle you happened to be experiencing lately.  I can also confirm that the PR produces much meaningful results when used for disk simulations by various particle codes (Gadget, GIZMO, Gasoline, etc. in the AGORA disk comparison).  \n\nAs for the normalization:  I have always used a normalized \u201cnormal\u201d vector so far; but, I can also confirm that with an unnormalized \u201cnormal\u201d vector, I do get a garbage in e.g. particle_velocity_cylindrical_[radius, theta].  The normalization check in principle should be included in all the functions that uses the normal vector, I concur.  \n\nBest wishes,\n\nJi-hoon",
                "html": "<p>Thank you Ben for quickly checking and verifying this PR.  </p>\n<p>It is great to hear that the PR helps you solve the riddle you happened to be experiencing lately.  I can also confirm that the PR produces much meaningful results when used for disk simulations by various particle codes (Gadget, GIZMO, Gasoline, etc. in the AGORA disk comparison).  </p>\n<p>As for the normalization:  I have always used a normalized \u201cnormal\u201d vector so far; but, I can also confirm that with an unnormalized \u201cnormal\u201d vector, I do get a garbage in e.g. particle_velocity_cylindrical_[radius, theta].  The normalization check in principle should be included in all the functions that uses the normal vector, I concur.  </p>\n<p>Best wishes,</p>\n<p>Ji-hoon</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-08T21:03:45.125175+00:00",
            "updated_on": "2015-08-08T21:03:45.189037+00:00",
            "id": 8917365
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/cosmosquark"
                    },
                    "html": {
                        "href": "https://bitbucket.org/cosmosquark/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/cosmosquark/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ben Thompson",
                "uuid": "{9e042959-0198-4a41-9f94-522b998130ed}",
                "username": "cosmosquark"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/8934331"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-8934331"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "Hi Ji-hoon.\n\nThat is good to hear.\n\nI will change my PR that I have started ( https://bitbucket.org/yt_analysis/yt/pull-requests/1664/ ) to run a check as to whether the normal vector submitted into the routine has been normalized or not.... and then to normalize it.\n\nI want to look at why both the curves in the second plot are slightly different (although they both have 100 bins... and thus unequal bin widths).. But at least the shape with e.g vtheta-old-disk in the second plot is not the same as compared to vtheta-disk (computed using the code above).\n\nBen.",
                "html": "<p>Hi Ji-hoon.</p>\n<p>That is good to hear.</p>\n<p>I will change my PR that I have started ( <a href=\"https://bitbucket.org/yt_analysis/yt/pull-requests/1664/\" rel=\"nofollow\">https://bitbucket.org/yt_analysis/yt/pull-requests/1664/</a> ) to run a check as to whether the normal vector submitted into the routine has been normalized or not.... and then to normalize it.</p>\n<p>I want to look at why both the curves in the second plot are slightly different (although they both have 100 bins... and thus unequal bin widths).. But at least the shape with e.g vtheta-old-disk in the second plot is not the same as compared to vtheta-disk (computed using the code above).</p>\n<p>Ben.</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-10T08:57:05.796024+00:00",
            "updated_on": "2015-08-10T08:57:05.854022+00:00",
            "id": 8934331
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/cosmosquark"
                    },
                    "html": {
                        "href": "https://bitbucket.org/cosmosquark/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/cosmosquark/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Ben Thompson",
                "uuid": "{9e042959-0198-4a41-9f94-522b998130ed}",
                "username": "cosmosquark"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/9059577"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-9059577"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "I guess I am kinda curious as to why the manual computation of vtheta ( x * vy - y * vx ) / sqrt( x^2 + y^2) does not precisely match the vtheta results produced with this new PR (the second plot).. the skewness and spread of data is reduced. Obviously they are not going to have the same heights since I set the binning in this case to be the same (100), but it would be interesting to see why this is the case.\n\nWill do some more tests when I get the chance in the next day or so.\n\nBen",
                "html": "<p>I guess I am kinda curious as to why the manual computation of vtheta ( x * vy - y * vx ) / sqrt( x^2 + y^2) does not precisely match the vtheta results produced with this new PR (the second plot).. the skewness and spread of data is reduced. Obviously they are not going to have the same heights since I set the binning in this case to be the same (100), but it would be interesting to see why this is the case.</p>\n<p>Will do some more tests when I get the chance in the next day or so.</p>\n<p>Ben</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-13T12:09:11.026659+00:00",
            "updated_on": "2015-08-13T12:09:30.059189+00:00",
            "id": 9059577
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684/comments/9070080"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684/_/diff#comment-9070080"
                }
            },
            "pullrequest": {
                "title": "Fixing a bug where \"center\" vectors are used instead of \"normal\" vectors in get_sph_phi(), etc. ",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1684"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1684"
                    }
                },
                "id": 1684
            },
            "content": {
                "raw": "I've taken a look at the other places where these functions are called, and it looks like they do always accept just a `normal` vector except in the places that are corrected by this PR.",
                "html": "<p>I've taken a look at the other places where these functions are called, and it looks like they do always accept just a <code>normal</code> vector except in the places that are corrected by this PR.</p>",
                "markup": "markdown"
            },
            "created_on": "2015-08-13T16:16:46.200843+00:00",
            "updated_on": "2015-08-13T16:16:46.209584+00:00",
            "id": 9070080
        }
    ]
}