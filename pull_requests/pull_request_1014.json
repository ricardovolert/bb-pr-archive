{
    "reason": "Keeping `import yt` more lightweight than `from yt.mods import *`.",
    "state": "DECLINED",
    "updated_on": "2014-07-14T15:15:52.285674+00:00",
    "comment_count": 10,
    "description": "Previously, the unparsed_args functionality was instantiated in yt/mods.py, but I've moved it to __init__.py.  In yt 2.x, one could access it using the preferred way of loading yt:\r\n\r\n\r\n```\r\n#!python\r\n\r\nfrom yt.mods import *\r\nprint unparsed_args[0]\r\n```\r\n\r\n\r\nbut now the preferred way of interacting with yt in yt 3.0 is to retain the yt namespace:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport yt\r\nprint yt.unparsed_args[0]\r\n```\r\n\r\n\r\nThis allows that functionality to exist in yt-3.0 without having to pull all of yt.args.",
    "created_on": "2014-07-12T17:49:58.297027+00:00",
    "task_count": 0,
    "merge_commit": null,
    "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
    "links": {
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/diff"
        },
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/decline"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/activity"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/merge"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/commits"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/statuses"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments"
        }
    },
    "closed_by": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/chummels"
            },
            "html": {
                "href": "https://bitbucket.org/chummels/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/chummels/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "chummels",
        "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
        "username": "chummels"
    },
    "id": 1014,
    "type": "pullrequest",
    "author": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/chummels"
            },
            "html": {
                "href": "https://bitbucket.org/chummels/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/chummels/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "chummels",
        "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
        "username": "chummels"
    },
    "source": {
        "branch": {
            "name": "yt-3.0"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/chummels/yt/commit/50f4b65d410f"
                }
            },
            "hash": "50f4b65d410f"
        },
        "repository": {
            "full_name": "chummels/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/chummels/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/chummels/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/chummels/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{cc72b7fe-3d37-4cd2-a367-f2de113a2e82}"
        }
    },
    "close_source_branch": false,
    "destination": {
        "branch": {
            "name": "yt-3.0"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/d091dd64ed46"
                }
            },
            "hash": "d091dd64ed46"
        },
        "repository": {
            "full_name": "yt_analysis/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}"
        }
    },
    "comments": [
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388934"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388934"
                }
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "Is yt still catching command line arguments if you import it via `import yt`?  I think the idea is that `from yt.mods import *` loads yt like an application, snagging command line arguments and doing some additional setup in startup tasks.\n\n`import yt` should be much more lightweight and shouldn't do the startup tasks.\n\nWhat were you trying to do that didn't work?",
                "html": "<p>Is yt still catching command line arguments if you import it via <code>import yt</code>?  I think the idea is that <code>from yt.mods import *</code> loads yt like an application, snagging command line arguments and doing some additional setup in startup tasks.</p>\n<p><code>import yt</code> should be much more lightweight and shouldn't do the startup tasks.</p>\n<p>What were you trying to do that didn't work?</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T18:02:00.483491+00:00",
            "updated_on": "2014-07-12T18:02:00.492606+00:00",
            "id": 2388934
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/chummels"
                    },
                    "html": {
                        "href": "https://bitbucket.org/chummels/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/chummels/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Cameron Hummels",
                "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
                "username": "chummels"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388940"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388940"
                }
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "The only way you can catch command-line arguments prior to this PR is by:\n\n\n```\n#!python\n\nfrom yt.mods import *\nprint unparsed_args[0]\n```\n\n\nAfter this PR, you can grab the command-line arguments as per:\n\n\n```\n#!python\n\nimport yt\nprint yt.unparsed_args[0]\n```\n\n\nI'm not running any of the startup_tasks in the yt import call, I'm just providing access to the command-line arguments, so I didn't think it was slowing us down or bloating anything. The unparsed_args are purely within the yt namespace so it isn't cluttering anything either.",
                "html": "<p>The only way you can catch command-line arguments prior to this PR is by:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">yt.mods</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">print</span> <span class=\"n\">unparsed_args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>After this PR, you can grab the command-line arguments as per:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">yt</span>\n<span class=\"k\">print</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">unparsed_args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>I'm not running any of the startup_tasks in the yt import call, I'm just providing access to the command-line arguments, so I didn't think it was slowing us down or bloating anything. The unparsed_args are purely within the yt namespace so it isn't cluttering anything either.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T18:14:20.427372+00:00",
            "updated_on": "2014-07-12T18:14:20.439180+00:00",
            "id": 2388940
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388944"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388944"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388940"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388940"
                    }
                },
                "id": 2388940
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "Interesting -- does `sys.argv` get removed?  Or is that still accessible?",
                "html": "<p>Interesting -- does <code>sys.argv</code> get removed?  Or is that still accessible?</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T18:17:42.039622+00:00",
            "updated_on": "2014-07-12T18:17:42.047200+00:00",
            "id": 2388944
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/chummels"
                    },
                    "html": {
                        "href": "https://bitbucket.org/chummels/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/chummels/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Cameron Hummels",
                "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
                "username": "chummels"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388967"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388967"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388944"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388944"
                    }
                },
                "id": 2388944
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "`sys.argv` is still accessible and will work for simple cases, but I was looking for something that could still access arguments despite the presence of yt command-line flags like`--parallel`.  But perhaps I'm mixed up here, and that in order to use these command-line flags, you need to import yt the old way to force the startup tasks (i.e. `from yt.mods import *`) in which case this PR is unnecessary?  But now that I go to test this, it appears the --parallel flag is giving me errors, so I'm not sure.  ",
                "html": "<p><code>sys.argv</code> is still accessible and will work for simple cases, but I was looking for something that could still access arguments despite the presence of yt command-line flags like<code>--parallel</code>.  But perhaps I'm mixed up here, and that in order to use these command-line flags, you need to import yt the old way to force the startup tasks (i.e. <code>from yt.mods import *</code>) in which case this PR is unnecessary?  But now that I go to test this, it appears the --parallel flag is giving me errors, so I'm not sure.  </p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T18:33:43.547147+00:00",
            "updated_on": "2014-07-12T18:33:43.553680+00:00",
            "id": 2388967
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/yt-fido"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt-fido/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/yt-fido/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "yt-fido",
                "uuid": "{da2aa332-3f05-45c9-ae53-ff5ba34b35ce}",
                "username": "yt-fido"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388968"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388968"
                }
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "All tests pass. Good job!",
                "html": "<p>All tests pass. Good job!</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T18:35:45.796895+00:00",
            "updated_on": "2014-07-12T18:35:45.974308+00:00",
            "id": 2388968
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2389000"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2389000"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2388967"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2388967"
                    }
                },
                "id": 2388967
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "`--parallel` only works with `from yt.mods import *`.  If you prefer to use `import yt`, we now have `yt.enable_parallelism()`, which does the same thing as `--parallel` without needing to specify the command line option.  IMO this is a big win since it makes it more straightforward to use command line options in parallel scripts.\n\nI haven't checked, but this change might still need to be documented in the parallelism docs.",
                "html": "<p><code>--parallel</code> only works with <code>from yt.mods import *</code>.  If you prefer to use <code>import yt</code>, we now have <code>yt.enable_parallelism()</code>, which does the same thing as <code>--parallel</code> without needing to specify the command line option.  IMO this is a big win since it makes it more straightforward to use command line options in parallel scripts.</p>\n<p>I haven't checked, but this change might still need to be documented in the parallelism docs.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T19:05:53.834736+00:00",
            "updated_on": "2014-07-12T19:05:53.843661+00:00",
            "id": 2389000
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/chummels"
                    },
                    "html": {
                        "href": "https://bitbucket.org/chummels/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/chummels/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Cameron Hummels",
                "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
                "username": "chummels"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2389017"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2389017"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2389000"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2389000"
                    }
                },
                "id": 2389000
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "I just checked and ran a parallel job using a simple `import yt`, and I didn't have any problems.  Here is my simple job (using this PR):\n\n\n```\n#!python\n\nimport yt\nimport sys\nts = yt.load('enzo_tiny_cosmology/DD????/DD????')\nfor ds in ts.piter():\n    print \"fn=%s; t=%f\" % (ds.basename, ds.current_time)\nif yt.is_root():\n    print yt.unparsed_args[0]\n    print sys.argv[1]\n```\n\n\nIf I call this with: `mpirun -np 2 python temp.py --parallel 1`, it runs successfully using parallelism to split up the `piter` call.  But at the end, it outputs the result of the `yt.unparsed_args[0]` as `1`, whereas the `sys.argv[1]` yields `--parallel`, which in essence demonstrates what it is that I'm trying to avoid by porting `unparsed_args` to the `import yt` call.\n\nI was not aware of the `yt.enable_parallelism()` call, but that looks super useful.  I checked, and it's not in the parallelism docs yet.  I suppose by using this in one's code, it means one can avoid using the `--parallel flag`, but there are a few other flags which might get in the way here.  The output of `yt --help` lists them:\n\n\n```\n#!python\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --config CONFIG   Set configuration option, in the form param=value\n  --paste           Paste traceback to paste.yt-project.org\n  --paste-detailed  Paste a detailed traceback with local variables to paste\n                    .yt-project.org\n  --detailed        Display detailed traceback.\n  --rpdb            Enable remote pdb interaction (for parallel debugging).\n  --parallel        Run in MPI-parallel mode (must be launched as an MPI task)\n```\n\nAnyway, now that I know about `enable_parallelism`, that mostly beats the problem.  I just thought it might be useful to retain the `unparsed_args` functionality and didn't think it'd be a big deal to move it over to the naked `import yt` call, but if people are against it, I can make do with `sys.argv` and `enable_parallelism()`.  I don't really care.\n\nSo the question is: are people against this PR?  I think @brittonsmith uses this functionality in scripts.  Anyone else who wants it in yt-3.0 or should I just declines this?  I don't really care.",
                "html": "<p>I just checked and ran a parallel job using a simple <code>import yt</code>, and I didn't have any problems.  Here is my simple job (using this PR):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">yt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;enzo_tiny_cosmology/DD????/DD????&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">piter</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"s2\">&quot;fn=</span><span class=\"si\">%s</span><span class=\"s2\">; t=</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">current_time</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">is_root</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">unparsed_args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">print</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>If I call this with: <code>mpirun -np 2 python temp.py --parallel 1</code>, it runs successfully using parallelism to split up the <code>piter</code> call.  But at the end, it outputs the result of the <code>yt.unparsed_args[0]</code> as <code>1</code>, whereas the <code>sys.argv[1]</code> yields <code>--parallel</code>, which in essence demonstrates what it is that I'm trying to avoid by porting <code>unparsed_args</code> to the <code>import yt</code> call.</p>\n<p>I was not aware of the <code>yt.enable_parallelism()</code> call, but that looks super useful.  I checked, and it's not in the parallelism docs yet.  I suppose by using this in one's code, it means one can avoid using the <code>--parallel flag</code>, but there are a few other flags which might get in the way here.  The output of <code>yt --help</code> lists them:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">optional</span> <span class=\"n\">arguments</span><span class=\"p\">:</span>\n  <span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">help</span>        <span class=\"n\">show</span> <span class=\"n\">this</span> <span class=\"n\">help</span> <span class=\"n\">message</span> <span class=\"ow\">and</span> <span class=\"nb\">exit</span>\n  <span class=\"o\">--</span><span class=\"n\">config</span> <span class=\"n\">CONFIG</span>   <span class=\"n\">Set</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"n\">value</span>\n  <span class=\"o\">--</span><span class=\"n\">paste</span>           <span class=\"n\">Paste</span> <span class=\"n\">traceback</span> <span class=\"n\">to</span> <span class=\"n\">paste</span><span class=\"o\">.</span><span class=\"n\">yt</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">org</span>\n  <span class=\"o\">--</span><span class=\"n\">paste</span><span class=\"o\">-</span><span class=\"n\">detailed</span>  <span class=\"n\">Paste</span> <span class=\"n\">a</span> <span class=\"n\">detailed</span> <span class=\"n\">traceback</span> <span class=\"k\">with</span> <span class=\"n\">local</span> <span class=\"n\">variables</span> <span class=\"n\">to</span> <span class=\"n\">paste</span>\n                    <span class=\"o\">.</span><span class=\"n\">yt</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">org</span>\n  <span class=\"o\">--</span><span class=\"n\">detailed</span>        <span class=\"n\">Display</span> <span class=\"n\">detailed</span> <span class=\"n\">traceback</span><span class=\"o\">.</span>\n  <span class=\"o\">--</span><span class=\"n\">rpdb</span>            <span class=\"n\">Enable</span> <span class=\"n\">remote</span> <span class=\"n\">pdb</span> <span class=\"n\">interaction</span> <span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"n\">parallel</span> <span class=\"n\">debugging</span><span class=\"p\">)</span><span class=\"o\">.</span>\n  <span class=\"o\">--</span><span class=\"n\">parallel</span>        <span class=\"n\">Run</span> <span class=\"ow\">in</span> <span class=\"n\">MPI</span><span class=\"o\">-</span><span class=\"n\">parallel</span> <span class=\"n\">mode</span> <span class=\"p\">(</span><span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">launched</span> <span class=\"k\">as</span> <span class=\"n\">an</span> <span class=\"n\">MPI</span> <span class=\"n\">task</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Anyway, now that I know about <code>enable_parallelism</code>, that mostly beats the problem.  I just thought it might be useful to retain the <code>unparsed_args</code> functionality and didn't think it'd be a big deal to move it over to the naked <code>import yt</code> call, but if people are against it, I can make do with <code>sys.argv</code> and <code>enable_parallelism()</code>.  I don't really care.</p>\n<p>So the question is: are people against this PR?  I think <a href=\"/brittonsmith/\" rel=\"nofollow\" title=\"@brittonsmith\" class=\"mention\">Britton Smith</a> uses this functionality in scripts.  Anyone else who wants it in yt-3.0 or should I just declines this?  I don't really care.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T19:19:35.682722+00:00",
            "updated_on": "2014-07-12T19:19:35.705130+00:00",
            "id": 2389017
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2389024"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2389024"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2389017"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2389017"
                    }
                },
                "id": 2389017
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "It looks like you were testing using your PR.  With your change, the `--parallel` flag is captured inside `startup_tasks`, which happens during `import yt`.\n\nWithout your change, using the following script:\n\n\n```\n#!python\n\nimport yt\nyt.enable_parallelism()\nimport sys\nts = yt.load('enzo_tiny_cosmology/DD????/DD????')\nfor ds in ts.piter():\n    print \"fn=%s; t=%f\" % (ds.basename, ds.current_time)\nif yt.is_root():\n    print sys.argv[1]\n```\n\nI see that --parallel is printed when executing the script with `mpirun -n 2 python test.py --parallel 1`.  If I exclude `--parallel`, `1` is printed and the script still runs in parallel.\n\nI think this is the expected behavior.  Command line options are only intercepted by yt if we import using `from yt.mods import *`.\n\nI'm definitely -1 on this change.",
                "html": "<p>It looks like you were testing using your PR.  With your change, the <code>--parallel</code> flag is captured inside <code>startup_tasks</code>, which happens during <code>import yt</code>.</p>\n<p>Without your change, using the following script:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">yt</span>\n<span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">enable_parallelism</span><span class=\"p\">()</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">&#39;enzo_tiny_cosmology/DD????/DD????&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">piter</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"s2\">&quot;fn=</span><span class=\"si\">%s</span><span class=\"s2\">; t=</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">current_time</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">yt</span><span class=\"o\">.</span><span class=\"n\">is_root</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<p>I see that --parallel is printed when executing the script with <code>mpirun -n 2 python test.py --parallel 1</code>.  If I exclude <code>--parallel</code>, <code>1</code> is printed and the script still runs in parallel.</p>\n<p>I think this is the expected behavior.  Command line options are only intercepted by yt if we import using <code>from yt.mods import *</code>.</p>\n<p>I'm definitely -1 on this change.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-12T19:29:24.743904+00:00",
            "updated_on": "2014-07-12T19:44:54.109698+00:00",
            "id": 2389024
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2397084"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2397084"
                }
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "I think, going over this, that it is a regression to what we had gone over on the mailing list.  The idea of the change to `import yt` was that there would be two modes of operation:\n\n * `import yt` where yt is a library that plays nicely with its environment and does not modify the arguments, the parallelism, and avoids setting up unnecessary global state.\n * `from yt.mods import *` where yt is an application, which allows it to modify the global state, to set up parallelism, parse command line arguments and so on.\n\nI think for the case where we do `import yt`, we should expect that `sys.argv` is where the arguments are.",
                "html": "<p>I think, going over this, that it is a regression to what we had gone over on the mailing list.  The idea of the change to <code>import yt</code> was that there would be two modes of operation:</p>\n<ul>\n<li><code>import yt</code> where yt is a library that plays nicely with its environment and does not modify the arguments, the parallelism, and avoids setting up unnecessary global state.</li>\n<li><code>from yt.mods import *</code> where yt is an application, which allows it to modify the global state, to set up parallelism, parse command line arguments and so on.</li>\n</ul>\n<p>I think for the case where we do <code>import yt</code>, we should expect that <code>sys.argv</code> is where the arguments are.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-14T14:22:25.128947+00:00",
            "updated_on": "2014-07-14T14:22:25.142022+00:00",
            "id": 2397084
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/chummels"
                    },
                    "html": {
                        "href": "https://bitbucket.org/chummels/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/chummels/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Cameron Hummels",
                "uuid": "{de871bb8-32e9-450a-b8c9-2b49a1334f16}",
                "username": "chummels"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014/comments/2397896"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014/_/diff#comment-2397896"
                }
            },
            "pullrequest": {
                "title": "Moving unparsed_args functionality to __init__ so it can be used from a naked \"import yt\"",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/1014"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/1014"
                    }
                },
                "id": 1014
            },
            "content": {
                "raw": "Fair enough.  I thought about it as well over the weekend, and I think I'm in agreement on this, especially now that I know about the `enable_parallelism()` function.",
                "html": "<p>Fair enough.  I thought about it as well over the weekend, and I think I'm in agreement on this, especially now that I know about the <code>enable_parallelism()</code> function.</p>",
                "markup": "markdown"
            },
            "created_on": "2014-07-14T15:15:23.559703+00:00",
            "updated_on": "2014-07-14T15:15:23.569176+00:00",
            "id": 2397896
        }
    ]
}