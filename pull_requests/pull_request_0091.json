{
    "links": {
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/decline"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/activity"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/commits"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/merge"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/statuses"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/comments"
        },
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/diff"
        }
    },
    "task_count": 0,
    "source": {
        "repository": {
            "full_name": "jzuhone/yt-old",
            "uuid": "{8936e0ba-e21c-47d2-bfc6-728321863245}",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/jzuhone/yt-old"
                },
                "html": {
                    "href": "https://bitbucket.org/jzuhone/yt-old"
                },
                "avatar": {
                    "href": "https://bitbucket.org/jzuhone/yt-old/avatar/32/"
                }
            },
            "name": "yt-old"
        },
        "commit": {
            "hash": "bd34169173fb",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/jzuhone/yt-old/commit/bd34169173fb"
                }
            }
        },
        "branch": {
            "name": "yt"
        }
    },
    "closed_by": {
        "username": "MatthewTurk",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
            },
            "html": {
                "href": "https://bitbucket.org/MatthewTurk/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
            }
        },
        "display_name": "Matt Turk",
        "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
    },
    "title": "Support for mapping grid-based fields onto particle trajectories on-the-fly.",
    "id": 91,
    "comment_count": 3,
    "created_on": "2012-02-10T14:11:38.775784+00:00",
    "merge_commit": {
        "hash": "eebbd2ec7555",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/eebbd2ec7555"
            }
        }
    },
    "comments": [
        {
            "content": {
                "markup": "creole",
                "raw": "If we had an alternative version of sample_field_at_positions that took into account which grids the particles were on, then we wouldn't have to loop over all of them. I don't think there is a particle_grid attribute, but if I recall correctly this could be generated very easily. (\"particle_blk\" in FLASH sims doesn't cut it since it's referring to the block on the //local// processor during the simulation and means nothing outside of the simulation.)",
                "html": "<p>If we had an alternative version of sample_field_at_positions that took into account which grids the particles were on, then we wouldn't have to loop over all of them. I don't think there is a particle_grid attribute, but if I recall correctly this could be generated very easily. (\"particle_blk\" in FLASH sims doesn't cut it since it's referring to the block on the <em>local</em> processor during the simulation and means nothing outside of the simulation.)</p>\n"
            },
            "user": {
                "username": "jzuhone",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/jzuhone"
                    },
                    "html": {
                        "href": "https://bitbucket.org/jzuhone/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/jzuhone/avatar/32/"
                    }
                },
                "display_name": "John ZuHone",
                "uuid": "{0c51edfa-e317-432f-bbef-7401c6e2aa8a}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/comments/2761"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91/_/diff#comment-2761"
                }
            },
            "created_on": "2012-02-10T14:20:20.627890+00:00",
            "updated_on": "2012-02-10T14:20:38.479363+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91"
                    }
                },
                "title": "Support for mapping grid-based fields onto particle trajectories on-the-fly.",
                "id": 91
            },
            "type": "pullrequest_comment",
            "id": 2761
        },
        {
            "content": {
                "markup": "creole",
                "raw": "Yes, that would be ideal -- the best would be if we could somehow track that when they were added to the trajectory object itself.  As it stands it does collision checking, but you can probably see that this is not efficient.  Having a grid index would be perfect.  We can try figuring out how to do this in a way that works across codes, likely by having a ValidateGridType validator on a particle_field that simple returns data.id in the same shape as data.NumberOfParticles.",
                "html": "<p>Yes, that would be ideal -- the best would be if we could somehow track that when they were added to the trajectory object itself.  As it stands it does collision checking, but you can probably see that this is not efficient.  Having a grid index would be perfect.  We can try figuring out how to do this in a way that works across codes, likely by having a ValidateGridType validator on a particle_field that simple returns data.id in the same shape as data.NumberOfParticles.</p>\n"
            },
            "user": {
                "username": "MatthewTurk",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "display_name": "Matt Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/comments/2762"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91/_/diff#comment-2762"
                }
            },
            "created_on": "2012-02-10T14:22:09.969355+00:00",
            "updated_on": "2012-02-10T14:22:09.989724+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91"
                    }
                },
                "title": "Support for mapping grid-based fields onto particle trajectories on-the-fly.",
                "id": 91
            },
            "type": "pullrequest_comment",
            "id": 2762
        },
        {
            "content": {
                "markup": "creole",
                "raw": "I can think of one possible optimization. If a bounding box is found for the particles at each snapshot, it should be fairly easy to reduce the number of grids in the loop by using region._grids.",
                "html": "<p>I can think of one possible optimization. If a bounding box is found for the particles at each snapshot, it should be fairly easy to reduce the number of grids in the loop by using region._grids.</p>\n"
            },
            "user": {
                "username": "sskory",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/sskory"
                    },
                    "html": {
                        "href": "https://bitbucket.org/sskory/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/sskory/avatar/32/"
                    }
                },
                "display_name": "Stephen Skory",
                "uuid": "{11787434-dea2-42d8-b94d-88d347eb151a}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91/comments/2773"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91/_/diff#comment-2773"
                }
            },
            "created_on": "2012-02-10T20:52:02.232336+00:00",
            "updated_on": "2012-02-10T20:52:02.252390+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/91"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/91"
                    }
                },
                "title": "Support for mapping grid-based fields onto particle trajectories on-the-fly.",
                "id": 91
            },
            "type": "pullrequest_comment",
            "id": 2773
        }
    ],
    "reason": "",
    "type": "pullrequest",
    "close_source_branch": false,
    "state": "MERGED",
    "description": "Now, if you submit a grid field to the ParticleTrajectoryCollection, you can get the grid data at those particle positions along the trajectory. It makes use of Matt's sample_field_at_positions function. The following verifies that it works:\r\n\r\n{{{\r\n#!python\r\n>>> fields = [\"Density\"]\r\n>>>\r\n>>> trajs = ParticleTrajectoryCollection(my_fns, indices, fields=fields)\r\n>>>\r\n>>> for traj in trajs :\r\n>>> \r\n>>>    for i in xrange(trajs.num_steps) :\r\n>>>\r\n>>>        pf = load(my_fns[i])\r\n>>>        \r\n>>>        x = traj[\"particle_position_x\"][i]\r\n>>>        y = traj[\"particle_position_y\"][i]\r\n>>>        z = traj[\"particle_position_z\"][i]\r\n>>>\r\n>>>        dens = pf.h.find_field_value_at_point([\"Density\"], [x,y,z])\r\n>>>\r\n>>>        print traj[\"Density\"][i], dens\r\n}}}\r\n\r\nsince the two numbers should be the same. \r\n\r\nHowever, it is VERY slow, since for each pf we have to loop over all of the grids.",
    "author": {
        "username": "jzuhone",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/jzuhone"
            },
            "html": {
                "href": "https://bitbucket.org/jzuhone/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/jzuhone/avatar/32/"
            }
        },
        "display_name": "John ZuHone",
        "uuid": "{0c51edfa-e317-432f-bbef-7401c6e2aa8a}"
    },
    "updated_on": "2012-02-14T14:55:23.420867+00:00",
    "destination": {
        "repository": {
            "full_name": "yt_analysis/yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt"
        },
        "commit": {
            "hash": "c08348acdbd3",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/c08348acdbd3"
                }
            }
        },
        "branch": {
            "name": "yt"
        }
    }
}