{
    "links": {
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/decline"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/activity"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/commits"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/merge"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/statuses"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments"
        },
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/diff"
        }
    },
    "task_count": 0,
    "source": {
        "repository": null,
        "commit": null,
        "branch": {
            "name": "yt"
        }
    },
    "closed_by": {
        "username": "MatthewTurk",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
            },
            "html": {
                "href": "https://bitbucket.org/MatthewTurk/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
            }
        },
        "display_name": "Matt Turk",
        "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
    },
    "title": "Modifying the merger tree for speed and efficiency",
    "id": 124,
    "comment_count": 4,
    "created_on": "2012-03-20T01:49:49.634271+00:00",
    "merge_commit": null,
    "comments": [
        {
            "content": {
                "markup": "creole",
                "raw": "Hi Stephen,\n\nThanks for reducing the IO load.  I have two comments --\n\n1) self.mine seems to introduce a lot of logic.  I would encourage you to split the blocks executed inside the conditional into separate subroutines.  Also, self.mine is not a terribly good name.  There's already \"should_i_write\" and I am also not entirely sure that we need \"self.mine\" when \"self.comm.rank\" already exists.\n2) mpi_Bcast_array is a nice idea, but I would prefer that an isinstance check for arrays be placed into the existing bcast-calling routine and then provide the broadcasting there.  With the two-step broadcast we will a small amount of latency; on some architectures this may even outweigh the cost of pickling!  A final option would be to move this into par_combine and add a new \"bcast\" operation for \"array\".",
                "html": "<p>Hi Stephen,</p>\n<p>Thanks for reducing the IO load.  I have two comments --</p>\n<p>1) self.mine seems to introduce a lot of logic.  I would encourage you to split the blocks executed inside the conditional into separate subroutines.  Also, self.mine is not a terribly good name.  There's already \"should_i_write\" and I am also not entirely sure that we need \"self.mine\" when \"self.comm.rank\" already exists.\n2) mpi_Bcast_array is a nice idea, but I would prefer that an isinstance check for arrays be placed into the existing bcast-calling routine and then provide the broadcasting there.  With the two-step broadcast we will a small amount of latency; on some architectures this may even outweigh the cost of pickling!  A final option would be to move this into par_combine and add a new \"bcast\" operation for \"array\".</p>\n"
            },
            "user": {
                "username": "MatthewTurk",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "display_name": "Matt Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4138"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4138"
                }
            },
            "created_on": "2012-03-20T13:08:36.352867+00:00",
            "updated_on": "2012-03-20T13:08:36.357770+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124"
                    }
                },
                "title": "Modifying the merger tree for speed and efficiency",
                "id": 124
            },
            "type": "pullrequest_comment",
            "id": 4138
        },
        {
            "content": {
                "markup": "creole",
                "raw": "1. In my defense, self.comm.rank didn't exist when I wrote the code, and I didn't see a need to change it.\n\n2. Which \"existing bcast-calling routine\"? The only one I found was _mpi_bcast_pickled. If you're talking about par_combine as the \"existing bcast-calling routine\", then it looks like you're supporting getting rid of bcast_pickled, too. I guess I just don't understand the ethos of parallelism anymore.",
                "html": "<p>1. In my defense, self.comm.rank didn't exist when I wrote the code, and I didn't see a need to change it.</p>\n<p>2. Which \"existing bcast-calling routine\"? The only one I found was _mpi_bcast_pickled. If you're talking about par_combine as the \"existing bcast-calling routine\", then it looks like you're supporting getting rid of bcast_pickled, too. I guess I just don't understand the ethos of parallelism anymore.</p>\n"
            },
            "user": {
                "username": "sskory",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/sskory"
                    },
                    "html": {
                        "href": "https://bitbucket.org/sskory/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/sskory/avatar/32/"
                    }
                },
                "display_name": "Stephen Skory",
                "uuid": "{11787434-dea2-42d8-b94d-88d347eb151a}"
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4138"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4138"
                    }
                },
                "id": 4138
            },
            "created_on": "2012-03-20T13:41:13.431118+00:00",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4142"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4142"
                }
            },
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124"
                    }
                },
                "title": "Modifying the merger tree for speed and efficiency",
                "id": 124
            },
            "type": "pullrequest_comment",
            "id": 4142,
            "updated_on": "2012-03-20T13:41:13.438721+00:00"
        },
        {
            "content": {
                "markup": "creole",
                "raw": "2) Ah, you're right, I thought there was another bcast routine.  Rather than add a new routine, remove bcast_pickled and join it with what you have written.\n\nThe ethos of parallelism is to get rid of parallel logic inside the routines -- like merger trees -- themselves, and instead speak in more broad terms of combining objects, distributing objects, and the like.  Removing the _mpi prefix was an incomplete job in the past because of cruft and code without test coverage.  Moving forward I would very much like to see the number of public methods reduced, and motion toward action-based dispatch.  Requiring a pickled/unpickled broadcast is not ideal; I would prefer to see the actual decision and parallelism logic moved into the parallel utilities.",
                "html": "<p>2) Ah, you're right, I thought there was another bcast routine.  Rather than add a new routine, remove bcast_pickled and join it with what you have written.</p>\n<p>The ethos of parallelism is to get rid of parallel logic inside the routines -- like merger trees -- themselves, and instead speak in more broad terms of combining objects, distributing objects, and the like.  Removing the _mpi prefix was an incomplete job in the past because of cruft and code without test coverage.  Moving forward I would very much like to see the number of public methods reduced, and motion toward action-based dispatch.  Requiring a pickled/unpickled broadcast is not ideal; I would prefer to see the actual decision and parallelism logic moved into the parallel utilities.</p>\n"
            },
            "user": {
                "username": "MatthewTurk",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "display_name": "Matt Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4142"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4142"
                    }
                },
                "id": 4142
            },
            "created_on": "2012-03-20T13:45:55.359784+00:00",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4143"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4143"
                }
            },
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124"
                    }
                },
                "title": "Modifying the merger tree for speed and efficiency",
                "id": 124
            },
            "type": "pullrequest_comment",
            "id": 4143,
            "updated_on": "2012-03-20T13:45:55.365520+00:00"
        },
        {
            "content": {
                "markup": "creole",
                "raw": "Really great work, Stephen. Thank you.",
                "html": "<p>Really great work, Stephen. Thank you.</p>\n"
            },
            "user": {
                "username": "MatthewTurk",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "display_name": "Matt Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124/comments/4149"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124/_/diff#comment-4149"
                }
            },
            "created_on": "2012-03-20T16:17:59.523330+00:00",
            "updated_on": "2012-03-20T16:17:59.529175+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/124"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/124"
                    }
                },
                "title": "Modifying the merger tree for speed and efficiency",
                "id": 124
            },
            "type": "pullrequest_comment",
            "id": 4149
        }
    ],
    "reason": "",
    "type": "pullrequest",
    "close_source_branch": false,
    "state": "MERGED",
    "description": "The SQLite database now is only touched by the root process for both reading and writing when building the merger tree. Previously reads happened on all tasks. This should speed things up (it actually does a bit on a smallish test case) and use less memory.\r\n\r\nI also removed the 'sleep' parameter, and the associated '_ensure_db_sync' function, which are no longer needed. I'll update the docs accordingly, soon.\r\n\r\nUpdate: I forgot to add, I added a _mpi_Bcast_array which broadcasts arrays from root and auto-senses array type and shape.\r\n\r\nUpdate 2:\r\n\r\nThere is now only one mpi_bcast that auto-senses what it should do:\r\npickled or non-pickled.\r\n\r\nRemoved self.mine/size in favor of self.comm.rank/size.\r\n\r\nCombined one bit of mostly repeated code into a new function.",
    "author": {
        "username": "sskory",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/sskory"
            },
            "html": {
                "href": "https://bitbucket.org/sskory/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/sskory/avatar/32/"
            }
        },
        "display_name": "Stephen Skory",
        "uuid": "{11787434-dea2-42d8-b94d-88d347eb151a}"
    },
    "updated_on": "2012-03-20T16:18:09.423011+00:00",
    "destination": {
        "repository": {
            "full_name": "yt_analysis/yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt"
        },
        "commit": {
            "hash": "d82e3fe88204",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/d82e3fe88204"
                }
            }
        },
        "branch": {
            "name": "yt"
        }
    }
}