{
    "reason": "This will be modified and improved along with a YTEP.",
    "state": "DECLINED",
    "updated_on": "2013-02-25T12:04:52.833695+00:00",
    "comment_count": 21,
    "description": "This pull request includes new profile objects that are cleaner and simpler than the old profile objects.\r\n\r\nThe API has changed, and so what was discussed in IRC\r\n\r\nWhat still needs to be done:\r\n\r\n * Switch all plotting code to using new profile objects\r\n * Deprecation warnings for usages of the old BinnedProfile objects.\r\n * `end_collect` implemented in the new profiles\r\n * Adding output functions\r\n\r\nThese new profiles differ in several ways.  For starters, the code is much simpler and shorter, and has gotten rid of some considerable amounts of cruft that had accumulated.  Particle fields are handled in a different way that reduces complexity.  Same for cuts.  Field accumulation information is kept after a field is added -- meaning that the plotting functions can back out if it's an average or not.\r\n\r\nThe main purpose of this is to make the code more maintainable, with fewer of the \"features\" that have accumulated over the years and never used.\r\n\r\nUnit tests have been added in identical form to the old tests.\r\n\r\nThis PR isn't ready to be accepted yet, but has been issued to get early feedback on the code for the profile objects.  Specifically, `Profile1D`, `Profile2D`, and `Profile3D` and the base classes.  The new profile plotters will use these exclusively.\r\n\r\n*UPDATE 1*:\r\n\r\nThis reworks the profile plotter to be much more in line with what people have suggested.  The commit message for 2448797 describes this in some more detail.\r\n\r\nHere is an example script:\r\n\r\nhttp://paste.yt-project.org/show/3008/\r\n\r\nproducing:\r\n\r\nhttp://i.imgur.com/TTtQg.png\r\n\r\nThis is designed to allow easier specification of log (across time series), plot specifications (i.e., labels and so on), access to axes, and overriding of titles.  Generating the specific title field will require more work, but will be necessary as we also need to encapsulate the accumulation and fractional specs.\r\n\r\nThis PR is still not ready, but I would like feedback on whether or not this is approaching what we are looking for.  If so, I will update the YTEP and implement the Phase Plot.  However, because the PhasePlot is all image-based, I won't be using the same overplot-by-default methodology.",
    "created_on": "2012-12-11T22:25:26.668353+00:00",
    "task_count": 0,
    "merge_commit": null,
    "title": "New Profile objects that are cleaner and simpler",
    "links": {
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/diff"
        },
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/decline"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/activity"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/merge"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/commits"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/statuses"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments"
        }
    },
    "closed_by": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
            },
            "html": {
                "href": "https://bitbucket.org/MatthewTurk/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Matt Turk",
        "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
        "username": "MatthewTurk"
    },
    "id": 369,
    "type": "pullrequest",
    "author": {
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
            },
            "html": {
                "href": "https://bitbucket.org/MatthewTurk/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
            }
        },
        "type": "user",
        "display_name": "Matt Turk",
        "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
        "username": "MatthewTurk"
    },
    "source": {
        "branch": {
            "name": "yt"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/MatthewTurk/yt/commit/24487975fbbc"
                }
            },
            "hash": "24487975fbbc"
        },
        "repository": {
            "full_name": "MatthewTurk/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/MatthewTurk/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/MatthewTurk/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/MatthewTurk/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{b5dfa70b-707c-4330-92a8-e3ea1bee18b3}"
        }
    },
    "close_source_branch": false,
    "destination": {
        "branch": {
            "name": "yt"
        },
        "commit": {
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/409b3134745b"
                }
            },
            "hash": "409b3134745b"
        },
        "repository": {
            "full_name": "yt_analysis/yt",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}"
        }
    },
    "comments": [
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65397"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65397"
                }
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Matt, this looks really nice.  One request I have is that I would like to see support for simultaneous profiling of the same field, but with different configurations (weight fields, accumulation).  It looks like this is not supported with the current implementation of the ProfileFieldInfo object.\nThe need to profile the same field with different weights actually comes up for me rather frequently.  This will also require rethinking how the profiles are named when they are written out.  I also contend that this makes more sense in general, since a Temperature profile has a different meaning than the field Temperature values.",
                "html": "<p>Matt, this looks really nice.  One request I have is that I would like to see support for simultaneous profiling of the same field, but with different configurations (weight fields, accumulation).  It looks like this is not supported with the current implementation of the ProfileFieldInfo object.\nThe need to profile the same field with different weights actually comes up for me rather frequently.  This will also require rethinking how the profiles are named when they are written out.  I also contend that this makes more sense in general, since a Temperature profile has a different meaning than the field Temperature values.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-17T15:58:04.347648+00:00",
            "updated_on": "2012-12-17T15:58:04.355598+00:00",
            "id": 65397
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65405"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65405"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65397"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65397"
                    }
                },
                "id": 65397
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I'm willing to make this change.  For querying I think we should move to the tuple system.  For instance:\n\n    profile[\"Temperature\",\"CellMassMsun\"]\n\nIf we do not use the second item, we either take whatever exists or (if it is ambiguous) throw an error.  What do you think?",
                "html": "<p>I'm willing to make this change.  For querying I think we should move to the tuple system.  For instance:</p>\n<div class=\"codehilite\"><pre><span></span>profile[&quot;Temperature&quot;,&quot;CellMassMsun&quot;]\n</pre></div>\n\n\n<p>If we do not use the second item, we either take whatever exists or (if it is ambiguous) throw an error.  What do you think?</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-17T16:03:55.219709+00:00",
            "updated_on": "2012-12-17T16:03:55.227163+00:00",
            "id": 65405
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65408"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65408"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65405"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65405"
                    }
                },
                "id": 65405
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I like the tuple access as well as what to do if no second key is given.  Trying to figure out what the right thing to do before erroring is a good idea.",
                "html": "<p>I like the tuple access as well as what to do if no second key is given.  Trying to figure out what the right thing to do before erroring is a good idea.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-17T16:07:40.499325+00:00",
            "updated_on": "2012-12-17T16:07:40.508664+00:00",
            "id": 65408
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68244"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68244"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/65408"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-65408"
                    }
                },
                "id": 65408
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Britton, I'm actually having somewhat of second thoughts.  I'm getting concerned that what we actually would want to do is to have the entire field specification in the request.  This can get somewhat cumbersome.\n\nSo I guess if we can figure out how to affiliate the field_spec and unambiguously grabbing it in return when using __getitem__, we could do that, but I'm no longer sure.",
                "html": "<p>Britton, I'm actually having somewhat of second thoughts.  I'm getting concerned that what we actually would want to do is to have the entire field specification in the request.  This can get somewhat cumbersome.</p>\n<p>So I guess if we can figure out how to affiliate the field_spec and unambiguously grabbing it in return when using <strong>getitem</strong>, we could do that, but I'm no longer sure.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-19T19:48:09.024405+00:00",
            "updated_on": "2012-12-19T19:48:09.033111+00:00",
            "id": 68244
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/samskillman"
                    },
                    "html": {
                        "href": "https://bitbucket.org/samskillman/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/samskillman/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Sam Skillman",
                "uuid": "{b03f9d96-1c52-4f21-bbdc-72f8e2a97a81}",
                "username": "samskillman"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68474"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68474"
                }
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Matt, new changes look great.  Should allow for handling tricky things like very different data sources over-plotting profiles.  ",
                "html": "<p>Matt, new changes look great.  Should allow for handling tricky things like very different data sources over-plotting profiles.  </p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-19T23:51:06.030763+00:00",
            "updated_on": "2012-12-19T23:51:06.041024+00:00",
            "id": 68474
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68477"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68477"
                }
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Hey Matt,\n\nDo you envision that a user will have to create a profile object using create_profile first?  My concern is that there's a little bit of API overhead associated with that.  I'd rather have an interface for creating a profile plot directly via ProfilePlotter, like how SlicePlot creates a Slice object.\n\nWhat do you think about that?",
                "html": "<p>Hey Matt,</p>\n<p>Do you envision that a user will have to create a profile object using create_profile first?  My concern is that there's a little bit of API overhead associated with that.  I'd rather have an interface for creating a profile plot directly via ProfilePlotter, like how SlicePlot creates a Slice object.</p>\n<p>What do you think about that?</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-19T23:58:36.025512+00:00",
            "updated_on": "2012-12-19T23:58:36.038072+00:00",
            "id": 68477
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68589"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68589"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68477"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68477"
                    }
                },
                "id": 68477
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Yes, I definitely want to do that.  I wrote about three versions of this today, and I had classmethods in the first, but forgot to put them back in.  I do want to try to retain simplicity in our interfaces, while allowing complexity on the backend.  What I want that to be evidenced by is a very restricted set of functionality (i.e., we will not allow for accumulation or fractional profiles in the classmethod) with the ability at a relatively early stage to provide advanced in depth functionality.",
                "html": "<p>Yes, I definitely want to do that.  I wrote about three versions of this today, and I had classmethods in the first, but forgot to put them back in.  I do want to try to retain simplicity in our interfaces, while allowing complexity on the backend.  What I want that to be evidenced by is a very restricted set of functionality (i.e., we will not allow for accumulation or fractional profiles in the classmethod) with the ability at a relatively early stage to provide advanced in depth functionality.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T02:48:18.404414+00:00",
            "updated_on": "2012-12-20T02:48:18.414704+00:00",
            "id": 68589
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68590"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68590"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68474"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68474"
                    }
                },
                "id": 68474
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I hadn't even thought of this, but you are right.\n\nThe thing that would be nice to figure out is an elegant way of passing in naming information.  My thought was that we could do this through plot_spec.  But I'd also like to have a nice way to supply profiles from an iterator or something like that.  Do you have any ideas?",
                "html": "<p>I hadn't even thought of this, but you are right.</p>\n<p>The thing that would be nice to figure out is an elegant way of passing in naming information.  My thought was that we could do this through plot_spec.  But I'd also like to have a nice way to supply profiles from an iterator or something like that.  Do you have any ideas?</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T02:49:11.789133+00:00",
            "updated_on": "2012-12-20T02:49:11.801788+00:00",
            "id": 68590
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}",
                "username": "ngoldbaum"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68627"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68627"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68589"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68589"
                    }
                },
                "id": 68589
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Sounds good.  With that in mind this is looking great!  Thanks so much for your hard work on this, Matt.",
                "html": "<p>Sounds good.  With that in mind this is looking great!  Thanks so much for your hard work on this, Matt.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T03:19:11.855314+00:00",
            "updated_on": "2012-12-20T03:19:11.861862+00:00",
            "id": 68627
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69506"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69506"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68244"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68244"
                    }
                },
                "id": 68244
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Would it be too much to have getitem accept the same arguments as add_field, and then have the key for the field_data dict be a concatenation of all those things?",
                "html": "<p>Would it be too much to have getitem accept the same arguments as add_field, and then have the key for the field_data dict be a concatenation of all those things?</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T17:06:07.964214+00:00",
            "updated_on": "2012-12-20T17:06:07.971430+00:00",
            "id": 69506
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69511"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69511"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69506"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69506"
                    }
                },
                "id": 69506
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I'm disinclined to do string concatenation for the keys, since this seems to be something we're moving away from.  Can you give some examples of using the same profile object (as opposed to the same data source) where you want to do different combinations of weighting/accumulation?  I have been thinking about it and I'm not sure it's inside any of my use cases, so I'm struggling to see the workflow.",
                "html": "<p>I'm disinclined to do string concatenation for the keys, since this seems to be something we're moving away from.  Can you give some examples of using the same profile object (as opposed to the same data source) where you want to do different combinations of weighting/accumulation?  I have been thinking about it and I'm not sure it's inside any of my use cases, so I'm struggling to see the workflow.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T17:08:40.156010+00:00",
            "updated_on": "2012-12-20T17:08:40.165276+00:00",
            "id": 69511
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69725"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69725"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69511"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69511"
                    }
                },
                "id": 69511
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I do comparisons of temperature profiles weighted by mass, volume, spectroscopic-like weighting, emission-weighted and others all the time.  This comes up when considering physical properties vs. how they are observed.  To do this, I have to create dummy fields that are just aliases for temperature.  This is just one case, but I encounter others frequently.  Use cases do exist and the elegant, but limited solution we have now forces inelegant solutions to be implemented elsewhere.  I'd really like it if we could come up with a solution to this.",
                "html": "<p>I do comparisons of temperature profiles weighted by mass, volume, spectroscopic-like weighting, emission-weighted and others all the time.  This comes up when considering physical properties vs. how they are observed.  To do this, I have to create dummy fields that are just aliases for temperature.  This is just one case, but I encounter others frequently.  Use cases do exist and the elegant, but limited solution we have now forces inelegant solutions to be implemented elsewhere.  I'd really like it if we could come up with a solution to this.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T21:44:12.085773+00:00",
            "updated_on": "2012-12-20T21:44:12.097167+00:00",
            "id": 69725
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69736"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69736"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69725"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69725"
                    }
                },
                "id": 69725
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Another example is the overdensity field used for calculating the virial radius.  That must be defined with accumulation=True because of the definition of the virial radius, but this is less useful than plotting the average overdensity within a spherical shell, which requires accumulation=False.  Because of this, we have to define an alias field ActualOverdensity.  There's another example.",
                "html": "<p>Another example is the overdensity field used for calculating the virial radius.  That must be defined with accumulation=True because of the definition of the virial radius, but this is less useful than plotting the average overdensity within a spherical shell, which requires accumulation=False.  Because of this, we have to define an alias field ActualOverdensity.  There's another example.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-20T21:49:56.309138+00:00",
            "updated_on": "2012-12-20T21:49:56.316207+00:00",
            "id": 69736
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/70282"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-70282"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/69736"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-69736"
                    }
                },
                "id": 69736
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Okay, so I have also done volume versus mass weighted averages, but I have always done them via multiple profile objects.  (In fact, I had no idea that there were alias fields for the sole purpose of using a single profile for the same field with different weightings/accumulations.)  This costs an extra traversal of the data, but I would wonder what the performance impact is of that.\n\nFor that workflow, of multiple profiles, this method is considerably simpler.  You can profile multiple profile objects to the ProfilePlotter and they will, quite simply, be plotted on the same graph.  This would allow you to make multiple profiles of the same field with different weightings and overplot them.\n\nWhat I am still struggling against is that addressing multiple fields is not elegant, and I am concerned about once again implementing an overly complex API for small gains in performance.  This is where we have gone in the past: providing long argument lists to ensure that every outcome can be accounted for without manipulation or additional modifications after an object has been created.\n\nI'm starting to wonder if, in fact, we need to supply fractional or accumulation arguments.  Both of these operations are operations that can be performed after the fact, by the display layer, and would probably be better suited to that anyway.  But the concern about different totaling of fields and weighting of fields is interesting.  Taking an additional average is cheap compared to the IO cost of iterating over the chunks of data and operating on them.  It is possible that we could always take averages (mass and volume) and also a totaling of the field.  This still leaves the fundamental UI question in doubt, however.\n\nI think what would be most productive at this time to try to make multiple, independently defined fields workable is to see examples of how, in a single, unified profile, we can best address the API of (1) creating the profile, (2) accessing the resultant fields and (3) making meaningful plots of the fields.  The API I've shown below works for this -- it automatically plots every field found in the profile, and as before, accessing the profile like a dict returns the form of that field that was created by the user.  This would be either an average or a total.  In addition, while the field specification (weight, accumulation, fractional) is accessible, it is not part of the API for accessing the string.  I don't want to perform any string concatenation inside the profile itself; we need an unambiguous method that does not burden the person writing the script to remember the order of weight/fraction/accum.",
                "html": "<p>Okay, so I have also done volume versus mass weighted averages, but I have always done them via multiple profile objects.  (In fact, I had no idea that there were alias fields for the sole purpose of using a single profile for the same field with different weightings/accumulations.)  This costs an extra traversal of the data, but I would wonder what the performance impact is of that.</p>\n<p>For that workflow, of multiple profiles, this method is considerably simpler.  You can profile multiple profile objects to the ProfilePlotter and they will, quite simply, be plotted on the same graph.  This would allow you to make multiple profiles of the same field with different weightings and overplot them.</p>\n<p>What I am still struggling against is that addressing multiple fields is not elegant, and I am concerned about once again implementing an overly complex API for small gains in performance.  This is where we have gone in the past: providing long argument lists to ensure that every outcome can be accounted for without manipulation or additional modifications after an object has been created.</p>\n<p>I'm starting to wonder if, in fact, we need to supply fractional or accumulation arguments.  Both of these operations are operations that can be performed after the fact, by the display layer, and would probably be better suited to that anyway.  But the concern about different totaling of fields and weighting of fields is interesting.  Taking an additional average is cheap compared to the IO cost of iterating over the chunks of data and operating on them.  It is possible that we could always take averages (mass and volume) and also a totaling of the field.  This still leaves the fundamental UI question in doubt, however.</p>\n<p>I think what would be most productive at this time to try to make multiple, independently defined fields workable is to see examples of how, in a single, unified profile, we can best address the API of (1) creating the profile, (2) accessing the resultant fields and (3) making meaningful plots of the fields.  The API I've shown below works for this -- it automatically plots every field found in the profile, and as before, accessing the profile like a dict returns the form of that field that was created by the user.  This would be either an average or a total.  In addition, while the field specification (weight, accumulation, fractional) is accessible, it is not part of the API for accessing the string.  I don't want to perform any string concatenation inside the profile itself; we need an unambiguous method that does not burden the person writing the script to remember the order of weight/fraction/accum.</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-21T13:21:51.339025+00:00",
            "updated_on": "2012-12-21T13:21:51.349015+00:00",
            "id": 70282
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/70309"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-70309"
                }
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "@brittonsmith I came up with two possible avenues, but I'm not 100% satisfied with either.\n\n * Stop doing profiles this way, where the object is defined by the x,y,z axis specification.  Move to having the data source have a `.profile` function that accepts field specifiers, which then get \"filled\" with the binned values.  This has the benefit of being completely unambiguous, as it would fill in profile specifications (or return, if we added a convenience wrapper) that are filled, and each of these would have its own specification included.  We would no longer have any string keys, or dict-like access.\n * Allow multiple weight arguments.  This would then return a compound dtype array, with named columns like \"total\", \"CellMass\" and so on, where each column would be the weighting value.  I do not have a solution to accumulation or fractional values, but I am thinking that if we went this way, we would move that into the display layer.  We would still only have a single string key, but it would return multiple field values.  We could even default to having all three basic types.",
                "html": "<p><a href=\"/brittonsmith/\" rel=\"nofollow\" title=\"@brittonsmith\" class=\"mention\">Britton Smith</a> I came up with two possible avenues, but I'm not 100% satisfied with either.</p>\n<ul>\n<li>Stop doing profiles this way, where the object is defined by the x,y,z axis specification.  Move to having the data source have a <code>.profile</code> function that accepts field specifiers, which then get \"filled\" with the binned values.  This has the benefit of being completely unambiguous, as it would fill in profile specifications (or return, if we added a convenience wrapper) that are filled, and each of these would have its own specification included.  We would no longer have any string keys, or dict-like access.</li>\n<li>Allow multiple weight arguments.  This would then return a compound dtype array, with named columns like \"total\", \"CellMass\" and so on, where each column would be the weighting value.  I do not have a solution to accumulation or fractional values, but I am thinking that if we went this way, we would move that into the display layer.  We would still only have a single string key, but it would return multiple field values.  We could even default to having all three basic types.</li>\n</ul>",
                "markup": "markdown"
            },
            "created_on": "2012-12-21T14:17:54.876744+00:00",
            "updated_on": "2012-12-21T14:17:54.910116+00:00",
            "id": 70309
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/70314"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-70314"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/70309"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-70309"
                    }
                },
                "id": 70309
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I need to think about this a bit, but the point you made above about accumulation and fractional is well taken.  These operations are super fast and can, and probably should, be saved for the plotting layer.  At the moment, I'm leaning toward the second option you presented.  Thanks for putting so much thought into addressing this!",
                "html": "<p>I need to think about this a bit, but the point you made above about accumulation and fractional is well taken.  These operations are super fast and can, and probably should, be saved for the plotting layer.  At the moment, I'm leaning toward the second option you presented.  Thanks for putting so much thought into addressing this!</p>",
                "markup": "markdown"
            },
            "created_on": "2012-12-21T14:30:38.276487+00:00",
            "updated_on": "2012-12-21T14:30:38.286614+00:00",
            "id": 70314
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/84710"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-84710"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/70314"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-70314"
                    }
                },
                "id": 70314
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "So, in 25 days, I haven't come up with any better ideas for how to deal with profiling the same field with multiple weights within one profile object.  I still don't really like storing the profile for some field as profile[field], because the name is not fully descriptive, that is, one does not have enough information to know after the fact how it was made.  I suppose that simply creating separate profile objects and saving them to different files is an acceptable solution.  It is slightly more of an inconvenience when one is analyzing a large number of halos, say with the HaloProfiler, but probably not enough to be a blocker on its own.  It seems that maybe the solutions we have come up with add too much complexity for the potential benefit and so it's just not worth it.\n\nRelated to this, how will the variances for the profiles be stored?  Currently, we do this as field_std, but that is not a particularly tidy solution either.",
                "html": "<p>So, in 25 days, I haven't come up with any better ideas for how to deal with profiling the same field with multiple weights within one profile object.  I still don't really like storing the profile for some field as profile[field], because the name is not fully descriptive, that is, one does not have enough information to know after the fact how it was made.  I suppose that simply creating separate profile objects and saving them to different files is an acceptable solution.  It is slightly more of an inconvenience when one is analyzing a large number of halos, say with the HaloProfiler, but probably not enough to be a blocker on its own.  It seems that maybe the solutions we have come up with add too much complexity for the potential benefit and so it's just not worth it.</p>\n<p>Related to this, how will the variances for the profiles be stored?  Currently, we do this as field_std, but that is not a particularly tidy solution either.</p>",
                "markup": "markdown"
            },
            "created_on": "2013-01-15T19:28:05.531140+00:00",
            "updated_on": "2013-01-15T19:28:05.541884+00:00",
            "id": 84710
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/84725"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-84725"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/84710"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-84710"
                    }
                },
                "id": 84710
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Hi Britton,\n\nWhat about the dtype solution?  It's not the most elegant, but it does provide a relatively straightforward way of getting data around.  It might look something like this:\n\nhttp://paste.yt-project.org/show/3057/\n\nI'm not interested in replacing existing functionality with less functional behavior *unless* it's an improvement.  Removing the ability of the Halo Profiler to make a single pass over the data is not an improvement, so I think we should address the problem and make it work for the HP.",
                "html": "<p>Hi Britton,</p>\n<p>What about the dtype solution?  It's not the most elegant, but it does provide a relatively straightforward way of getting data around.  It might look something like this:</p>\n<p><a href=\"http://paste.yt-project.org/show/3057/\" rel=\"nofollow\">http://paste.yt-project.org/show/3057/</a></p>\n<p>I'm not interested in replacing existing functionality with less functional behavior <em>unless</em> it's an improvement.  Removing the ability of the Halo Profiler to make a single pass over the data is not an improvement, so I think we should address the problem and make it work for the HP.</p>",
                "markup": "markdown"
            },
            "created_on": "2013-01-15T19:40:11.313200+00:00",
            "updated_on": "2013-01-15T19:40:11.322787+00:00",
            "id": 84725
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}",
                "username": "brittonsmith"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/84746"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-84746"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/84725"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-84725"
                    }
                },
                "id": 84725
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "I like this solution a lot.  I think it solves the issue I brought up and makes the profile objects more meaningful at the same time.  +1",
                "html": "<p>I like this solution a lot.  I think it solves the issue I brought up and makes the profile objects more meaningful at the same time.  +1</p>",
                "markup": "markdown"
            },
            "created_on": "2013-01-15T19:55:32.706229+00:00",
            "updated_on": "2013-01-15T19:55:32.719335+00:00",
            "id": 84746
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/samskillman"
                    },
                    "html": {
                        "href": "https://bitbucket.org/samskillman/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/samskillman/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Sam Skillman",
                "uuid": "{b03f9d96-1c52-4f21-bbdc-72f8e2a97a81}",
                "username": "samskillman"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/114974"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-114974"
                }
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/68590"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-68590"
                    }
                },
                "id": 68590
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "Perhaps we could pass in naming information for profiles through the profile objects themselves.  For example, if the profile held on to provenance information such as pfname or an optionally specified label, then it could be picked up.  I do something like this with some ImageArray stuff.  ",
                "html": "<p>Perhaps we could pass in naming information for profiles through the profile objects themselves.  For example, if the profile held on to provenance information such as pfname or an optionally specified label, then it could be picked up.  I do something like this with some ImageArray stuff.  </p>",
                "markup": "markdown"
            },
            "created_on": "2013-02-12T22:08:20.590324+00:00",
            "updated_on": "2013-02-12T22:08:20.598331+00:00",
            "id": 114974
        },
        {
            "user": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/MatthewTurk"
                    },
                    "html": {
                        "href": "https://bitbucket.org/MatthewTurk/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/MatthewTurk/avatar/32/"
                    }
                },
                "type": "user",
                "display_name": "Matthew Turk",
                "uuid": "{b3f0b280-55fc-4e8a-8bd1-40478d4cbdbf}",
                "username": "MatthewTurk"
            },
            "type": "pullrequest_comment",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369/comments/129984"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369/_/diff#comment-129984"
                }
            },
            "pullrequest": {
                "title": "New Profile objects that are cleaner and simpler",
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/369"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/369"
                    }
                },
                "id": 369
            },
            "content": {
                "raw": "This PR definitely needs more work before it's even close to being ready.  I will re-issue a new PR when that time comes.",
                "html": "<p>This PR definitely needs more work before it's even close to being ready.  I will re-issue a new PR when that time comes.</p>",
                "markup": "markdown"
            },
            "created_on": "2013-02-25T12:04:29.551752+00:00",
            "updated_on": "2013-02-25T12:04:29.560258+00:00",
            "id": 129984
        }
    ]
}