{
    "links": {
        "decline": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/decline"
        },
        "approve": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/approve"
        },
        "html": {
            "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126"
        },
        "activity": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/activity"
        },
        "self": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126"
        },
        "commits": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/commits"
        },
        "merge": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/merge"
        },
        "statuses": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/statuses"
        },
        "comments": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/comments"
        },
        "diff": {
            "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/diff"
        }
    },
    "task_count": 0,
    "source": {
        "repository": {
            "full_name": "brittonsmith/yt",
            "uuid": "{a3a98ec1-6936-4db5-8667-658e17c1eaca}",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/brittonsmith/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/brittonsmith/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/brittonsmith/yt/avatar/32/"
                }
            },
            "name": "yt"
        },
        "commit": {
            "hash": "98f574019641",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/brittonsmith/yt/commit/98f574019641"
                }
            }
        },
        "branch": {
            "name": "yt"
        }
    },
    "closed_by": {
        "username": "ngoldbaum",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
            },
            "html": {
                "href": "https://bitbucket.org/ngoldbaum/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
            }
        },
        "display_name": "Nathan Goldbaum",
        "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}"
    },
    "title": "[BUGFIX] cannot call parallel_root_only function inside a parallel_root_only function",
    "id": 2126,
    "comment_count": 2,
    "created_on": "2016-04-11T10:02:53.977478+00:00",
    "merge_commit": {
        "hash": "843a342ee510",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/843a342ee510"
            }
        }
    },
    "comments": [
        {
            "content": {
                "markup": "markdown",
                "raw": "Is there a way we can fix this in `parallel_root_only`? Could we just make that function a wrapper around `is_root()`? I see right now it does some dancing to handle tracebacks, is all that really necessary?",
                "html": "<p>Is there a way we can fix this in <code>parallel_root_only</code>? Could we just make that function a wrapper around <code>is_root()</code>? I see right now it does some dancing to handle tracebacks, is all that really necessary?</p>"
            },
            "user": {
                "username": "ngoldbaum",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/ngoldbaum"
                    },
                    "html": {
                        "href": "https://bitbucket.org/ngoldbaum/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/ngoldbaum/avatar/32/"
                    }
                },
                "display_name": "Nathan Goldbaum",
                "uuid": "{5dcd72da-6420-4a6d-9571-e75dffcac587}"
            },
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/comments/17177488"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126/_/diff#comment-17177488"
                }
            },
            "created_on": "2016-04-13T13:43:53.262071+00:00",
            "updated_on": "2016-04-13T13:43:53.269176+00:00",
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126"
                    }
                },
                "title": "[BUGFIX] cannot call parallel_root_only function inside a parallel_root_only function",
                "id": 2126
            },
            "type": "pullrequest_comment",
            "id": 17177488
        },
        {
            "content": {
                "markup": "markdown",
                "raw": "I think the thing the `parallel_root_only` does that can't be circumvented is setting up a barrier for all of the non-root processes to wait until the root is finished.  In that situation, if you called a `parallel_root_only` inside another `parallel_root_only` function, you always end up with misaligned barriers since the non-roots never even get into the second one.  I think if you want the non-roots to wait (which I believe we do), there is no other way.",
                "html": "<p>I think the thing the <code>parallel_root_only</code> does that can't be circumvented is setting up a barrier for all of the non-root processes to wait until the root is finished.  In that situation, if you called a <code>parallel_root_only</code> inside another <code>parallel_root_only</code> function, you always end up with misaligned barriers since the non-roots never even get into the second one.  I think if you want the non-roots to wait (which I believe we do), there is no other way.</p>"
            },
            "user": {
                "username": "brittonsmith",
                "type": "user",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
                    },
                    "html": {
                        "href": "https://bitbucket.org/brittonsmith/"
                    },
                    "avatar": {
                        "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
                    }
                },
                "display_name": "Britton Smith",
                "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}"
            },
            "parent": {
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/comments/17177488"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126/_/diff#comment-17177488"
                    }
                },
                "id": 17177488
            },
            "created_on": "2016-04-13T14:14:14.225433+00:00",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126/comments/17179845"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126/_/diff#comment-17179845"
                }
            },
            "pullrequest": {
                "type": "pullrequest",
                "links": {
                    "self": {
                        "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/pullrequests/2126"
                    },
                    "html": {
                        "href": "https://bitbucket.org/yt_analysis/yt/pull-requests/2126"
                    }
                },
                "title": "[BUGFIX] cannot call parallel_root_only function inside a parallel_root_only function",
                "id": 2126
            },
            "type": "pullrequest_comment",
            "id": 17179845,
            "updated_on": "2016-04-13T14:14:14.230835+00:00"
        }
    ],
    "reason": "",
    "type": "pullrequest",
    "close_source_branch": false,
    "state": "MERGED",
    "description": "This fixes a bug reported by a student working here in Edinburgh named Andrew Mackie.  A call to `parallel_objects` will fail if called after loading a `ytdata` profile dataset.  This is because this dataset type calls a `parallel_root_only` function that calls another `parallel_root_only` function, causing the mpi processes to get out of sync.  Hat tip to Andrew for isolating this bug!",
    "author": {
        "username": "brittonsmith",
        "type": "user",
        "links": {
            "self": {
                "href": "https://api.bitbucket.org/2.0/users/brittonsmith"
            },
            "html": {
                "href": "https://bitbucket.org/brittonsmith/"
            },
            "avatar": {
                "href": "https://bitbucket.org/account/brittonsmith/avatar/32/"
            }
        },
        "display_name": "Britton Smith",
        "uuid": "{94333901-a436-4c2c-8322-8d09e387eece}"
    },
    "updated_on": "2016-04-21T16:03:28.627341+00:00",
    "destination": {
        "repository": {
            "full_name": "yt_analysis/yt",
            "uuid": "{b73cb37c-40f2-493a-aaa9-41bc8d8974cc}",
            "type": "repository",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt"
                },
                "html": {
                    "href": "https://bitbucket.org/yt_analysis/yt"
                },
                "avatar": {
                    "href": "https://bitbucket.org/yt_analysis/yt/avatar/32/"
                }
            },
            "name": "yt"
        },
        "commit": {
            "hash": "248ccc5ef8b4",
            "links": {
                "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/yt_analysis/yt/commit/248ccc5ef8b4"
                }
            }
        },
        "branch": {
            "name": "yt"
        }
    }
}